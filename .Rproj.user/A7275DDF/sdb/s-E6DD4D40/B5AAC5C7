{
    "collab_server" : "",
    "contents" : "################################################################################\n# Author: Julius Eberhard\n# Last Edit: 2016-10-10\n# Project: ECHSE evapotranspiration\n# Functions: echseCtrl_cnf, echseCtrl_out, echseCtrl_loc, echseCtrl_fil, \n#            echseCtrl_shpar, echseCtrl_par, echseCtrl_ini\n# Aim: Writing Control Files for ECHSE Engine\n################################################################################\n\nechseCtrl_cnf <- function(engine,  # engine name\n                          tstart,  # start of model period\n                          tend,  # end of model period\n                          dt  # time step\n                          ) {\n\n  # writes main control file\n\n  writeLines(c(\n    \"########################################################################\",\n    \"# Computational settings\",\n    \"trap_fpe=true\",\n    \"#multithread=false\",\n    \"number_of_threads=1\",\n    \"singlethread_if_less_than=1\",\n    \"########################################################################\",\n    \"# Declaration of models (id and group)\",\n    \"table_objectDeclaration=../data/catchment/objDecl.dat\",\n    \"########################################################################\",\n    \"# Definition of the simulation time window\",\n    paste0(\"simStart=\", tstart),\n    paste0(\"simEnd=\", tend),\n    paste0(\"delta_t=\", dt),\n    \"########################################################################\",\n    \"# Specification of model outputs\",\n    \"table_selectedOutput=output_selection.txt\",\n    \"table_debugOutput=output_debug.txt\",\n    \"table_stateOutput=output_state.txt\",\n    paste(\"output_columnSeparator=\", \"\", sep=\"\\t\"),\n    \"output_lineComment=#\",\n    \"#outputDirectory=./out/\",\n    \"outputFormat=tab\",\n    \"saveFinalState=true\",\n    \"########################################################################\",\n    \"# Special characters in all input files (except for this control file)\",\n    \"input_columnSeparator=\t ;\",\n    \"input_lineComment=#\",\n    \"########################################################################\",\n    \"# Initial values\",\n    \"table_initialValues_scal=../data/initials/init_scal.dat\",\n    \"table_initialValues_vect=../data/initials/init_vect.dat\",\n    \"########################################################################\",\n    \"# Boundary conditions\",\n    \"table_inputOutputRelations=../data/catchment/objLink.dat\",\n    \"externalInput_bufferSize=1\",\n    \"table_externalInput_locations=../data/forcing/inputs_ext_locations.dat\",\n    \"table_externalInput_datafiles=../data/forcing/inputs_ext_datafiles.dat\",\n    \"########################################################################\",\n    \"# Class-specific input files\",\n    \"########################################################################\",\n    \"# dummy parameters\",\n    \"dummy_numParamsIndividual=../data/parameter/dummy_num.dat\",\n    \"dummy_funParamsIndividual=../data/parameter/dummy_fun.dat\",\n    \"dummy_numParamsShared=../data/parameter/dummy_num.dat\",\n    \"dummy_funParamsShared=../data/parameter/dummy_fun.dat\",\n    paste0(\"# \", engine, \" parameters\"),\n    paste0(engine,\n           \"_numParamsIndividual=../data/parameter/paramNum_WASA_svc.dat\"),\n    paste0(engine,\n           \"_funParamsIndividual=../data/parameter/dummy_fun.dat\"),\n    paste0(engine,\n           \"_numParamsShared=../data/parameter/sharedParamNum_WASA_svc.dat\"),\n    paste0(engine,\n           \"_funParamsShared=../data/parameter/dummy_fun.dat\")),\n    con=paste0(\"~/uni/projects/\", engine, \"/run/cnf_default\"))\n  \n}\n\n#----\n\nechseCtrl_out <- function(engine,    # engine name\n                          output,    # output variable\n                          et.choice  # etp or eta\n                          ) {\n\n  # writes control file for output selection\n\n  writeLines(c(\n    \"#\",\n    \"# Selection of output models and variables.\",\n    \"#\",\n    \"# Required columns are:\",\n    \"#   'object': ID of the object\",\n    \"#   'variable': Variable (must be an output of the respective model family)\",\n    \"#\",\n    \"# Further columns with meta-information may follow. These columns must also be\",\n    \"# readable (i.e. properly separated) but the contents is ignored.\", \n    \"\",\n    \"object    variable  digits\",\n    \"\",\n    paste0(\"test1     \", ifelse(output == \"evap\", et.choice,\n                                paste0(output, \"_out\")), \"       10\")),\n    con=paste0(\"~/uni/projects/\", engine, \"/run/output_selection.txt\"))\n\n}\n\n#----\n\nechseCtrl_loc <- function(engine,     # engine name\n                          needed,     # list of 0/1 info on required data\n                          available,  # list of 0/1 info on data availability\n                          locs        # list of location names for input data\n                          ) { \n\n  # writes control file for extern input locations\n\n  object <- \"test1\"\n  variable <- unlist(mapply(function(x, y) {\n                              if (y == 1) return(x)\n                            }, names(needed), needed))\n  location <- unlist(mapply(function(x, y, z) {\n                              if (x == 1) {\n                                if (y == 1) z else \"dummy\"\n                              }\n                            }, needed, available, locs))\n  weight <- 1\n  write.matrix(data.frame(object=rep(object, length(variable)), \n                          variable, location,\n                          weight=rep(weight, length(variable))),\n               paste0(\"~/uni/projects/\", engine, \n                      \"/data/forcing/inputs_ext_locations.dat\"),\n               sep=\"\\t\")\n  \n}\n\n#----\n\nechseCtrl_fil <- function(engine,\n                          field.station,\n                          needed,\n                          available,\n                          past  # logical; set past as true or false?\n                          ) {\n\n  # writes control file for data file directories\n\n  l <- unlist(\n         mapply(function(x, y, z) {\n                  if (x==1)\n                    paste(y, ifelse(y==\"sundur\", \"  true\", \"  false\"),\n                          ifelse(past, \"  true\", \"  false\"), \"  ../data/\",\n                          ifelse(z == 0,\n                                 \"forcing/meteo/dummy_ts.dat\",\n                                 ifelse(y == \"alb\" || y == \"cano_height\"\n                                        || y == \"doy\" || y == \"hour\"\n                                        || y == \"lai\" || y == \"utc_add\",\n                                        paste0(\"vegPar_time_series/\",\n                                               field.station, \"/\", y,\n                                               \"_data.dat\"),\n                                        paste0(\"forcing/meteo/05_meteofill/out/\",\n                                               field.station, \"/\", y,\n                                               \"_data.dat\"))),\n                          sep=\"\")\n                }, needed, names(needed), available)\n       )\n\n  writeLines(c(\n    \"# Specification of files from which the models' external inputs is to be read.\",\n    \"# For each external variable (used by any class), a single record is required.\",\n    \"\",\n    \"# 'variable': string - Name of the external input variable.\",\n    \"# 'file':     string - File containing the time series data for that variable.\",\n    \"# 'sums':     bool - Treat data as sums (not as averages) when disaggregating?\",\n    \"# 'past':     bool - Do times refer to the end (not the start) of an interval?\",\n    \"\",\n    \"variable  sums  past  file\",\n    \"\",\n    l), con=paste0(\"~/uni/projects/\", engine, \n                   \"/data/forcing/inputs_ext_datafiles.dat\"))\n}\n\n#----\n\nechseCtrl_shpar <- function(engine,\n                            parameters,\n                            needed\n                            ) { \n\n  # writes control file with shared scalar parameters\n\n  parameter <- unlist(mapply(function(x, y) {\n                               if (y == 1) return(unlist(x))\n                             }, names(parameters), needed))\n  value <- unlist(mapply(function(x, y) {\n                           if (y == 1) return(x)\n                         }, parameters, needed))\n  if (length(parameter > 0))\n    write.matrix(data.frame(parameter, value), \n                 paste0(\"~/uni/projects/\", engine, \n                        \"/data/parameter/sharedParamNum_WASA_svc.dat\"),\n                 sep=\"\\t\")\n}\n\n#----\n\nechseCtrl_par <- function(engine,\n                          parameters,  # list of par values\n                          needed  # list specifying which par are needed\n                          ) {\n\n  # writes control file with individual scalar parameters\n\n  parameter <- c(\"object\",\n                 unlist(mapply(function(x, y) {\n                                 if (y == 1) return(unlist(x))\n                               }, names(parameters), needed)))\n  value <- c(\"test1\",\n             unlist(mapply(function(x, y) {\n                             if (y == 1) return(as.numeric(x))\n                           }, parameters, needed)))\n  write(c(parameter, value), ncolumns=length(parameter), \n        paste0(\"~/uni/projects/\", engine, \n               \"/data/parameter/paramNum_WASA_svc.dat\"), \n        sep=\"\\t\")\n}\n\n#----\n\nechseCtrl_ini <- function(engine,\n                          state.var,  # vector of state variable names\n                          initials  # vector of initial values\n                          ) {\n\n  # writes control file with initial values of state variables\n\n  object <- \"test1\"\n  write.matrix(data.frame(object, variable=state.var, value=initials), \n               paste0(\"~/uni/projects/\", engine, \n                      \"/data/initials/init_scal.dat\"), \n               sep=\"\\t\")\n}\n",
    "created" : 1484310144646.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4065307796",
    "id" : "B5AAC5C7",
    "lastKnownWriteTime" : 1486115989,
    "last_content_update" : 1486115989020,
    "path" : "~/boxup/whk_echse/echseCtrl.R",
    "project_path" : "echseCtrl.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}