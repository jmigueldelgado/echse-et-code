{
    "collab_server" : "",
    "contents" : "################################################################################\n# Author: Julius Eberhard\n# Last Edit: 2016-12-07\n# Project: ECHSE Evapotranspiration\n# Program: echse_portugal\n# Aim: Data Preprocessing and Main Executing Script for ET in Portugal\n################################################################################\n\nrm(list=ls())\nassign(\"last.warning\", NULL, envir=baseenv())\n\n# set time zone to UTC\nSys.setenv(TZ=\"UTC\")\n\n# PROGRAM PARAMETERS -----------------------------------------------------------\n\noutput <- \"evap\"  # output quantity [evap, glorad, gloradmax, rad_net, radex, soilheat]\nfield.station <- \"HS\"  # Data of which field station are used? [HS, NSA]\net.choice <- \"eta\"  # Potential or actual evapotranspiration? [etp, eta]\net.choice[2] <- 13  # model for calculation [1=Makk, 11=PM, 12=FAO, 13=SW]\nwc.new <- T  # logical: Shall the newly calculated soil moisture data be used?\n\n# model period: start & end of model period, note the format!\nif (output %in% c(\"gloradmax\", \"rad_net\", \"radex\")) {\n  tstart <- \"2014-04-29 22:00:00\"\n  tend <- \"2014-07-01 05:00:00\"\n} else if (field.station == \"HS\") {\n# HS\n  #tstart <- \"2014-04-29 21:00:00\"; tend <- \"2014-05-04 13:00:00\"\n  #####tstart <- \"2014-05-08 23:00:00\"; tend <- \"2014-05-10 01:00:00\"\n  #tstart <- \"2014-05-13 23:00:00\"; tend <- \"2014-05-20 19:00:00\"\n  #tstart <- \"2014-05-22 13:00:00\"; tend <- \"2014-05-25 21:00:00\"\n  #tstart <- \"2014-06-16 23:00:00\"; tend <- \"2014-06-21 17:00:00\"\n  tstart <- \"2014-06-26 18:00:00\"; tend <- \"2014-07-01 05:00:00\"\n} else {\n# NSA\n  #tstart <- \"2014-04-29 22:00:00\"; tend <- \"2014-05-04 13:00:00\"\n  tstart <- \"2014-05-13 23:00:00\"; tend <- \"2014-05-20 19:00:00\"\n  #tstart <- \"2014-05-22 13:00:00\"; tend <- \"2014-05-25 21:00:00\"\n  #tstart <- \"2014-06-11 23:00:00\"; tend <- \"2014-06-14 03:00:00\"\n  #tstart <- \"2014-06-16 23:00:00\"; tend <- \"2014-06-21 17:00:00\"\n  #tstart <- \"2014-06-25 23:00:00\"; tend <- \"2014-07-01 07:00:00\"\n  #tstart <- \"2014-07-14 23:00:00\"; tend <- \"2014-07-21 07:00:00\"\n  #tstart <- \"2014-07-23 23:00:00\"; tend <- \"2014-08-04 18:00:00\"\n}\n\n# Shall the model period strictly exclude times with missing data?\nno.na <- T\n\n# For rad_net & radex, we need a maximum of the data, so no.na is not checked.\nif (output %in% c(\"gloradmax\", \"rad_net\", \"radex\"))\n  no.na <- F\n\n# declare availability of input data\nA <- list(alb=1,\n          apress=1,\n          cano_height=1,\n          cloud=0,\n          doy=1,\n          glorad=1,\n          glorad_max=0,\n          hour=1,\n          lai=1,\n          rad_long=0,\n          rad_net=1,\n          rad_net_soil=0,\n          radex=0,\n          rhum=1,\n          soilheat=1,\n          sundur=0,\n          temp_max=0,\n          temp_min=0,\n          temper=1,\n          totalheat=0,\n          utc_add=1,\n          wc_vol_root=1,\n          wc_vol_top=1,\n          wind=1)\n\n# locations\nlocs <- list(field.station,  # alb\n             \"Met\",  # apress\n             field.station,  # cano_height\n             \"any\",  # cloud, not actually used\n             \"any\",  # doy\n             \"Met\",  # glorad\n             \"any\",  # glorad_max\n             \"any\",  # hour\n             field.station,  # lai\n             \"any\",  # rad_long\n             field.station,  # rad_net\n             \"any\",  # rad_net_soil\n             \"any\",  # radex\n             \"Met\",  # rhum\n             field.station,  # soilheat\n             \"Met\",  # sundur\n             \"any\",  # temp_max\n             \"any\",  # temp_min\n             field.station,  # temper\n             \"any\",  # totalheat\n             \"any\",  # utc_add\n             field.station,  # wc_vol_root\n             field.station,  # wc_vol_top\n             field.station)  # wind\n\n# SET AND LOAD -----------------------------------------------------------------\n\n# set working directory\nif (system(\"hostname\", intern=T) == \"raspberrypi\") {\n  setwd(\"/home/pi/ownCloud/whk_echse\")\n} else {\n  setwd(\"/home/julius/boxup/whk_echse\")\n}\n\n# load scripts\nsource(\"~/R/jufun.R\")  # CheckPack()\nsource(\"echseCtrl.R\")  # control files\nsource(\"echseInput.R\")  # data input files\nsource(\"echseParEst.R\")  # parameter estimation\nsource(\"echsePost.R\")  # postprocessing\nsource(\"echsePre.R\")  # preprocessing\n\n# load packages\nCheckPack(c(\"MASS\", \"RAtmosphere\", \"soilwaterptf\", \"TTR\", \"xtable\", \"xts\"))\nlibrary(MASS)  # write.matrix()\nlibrary(soilwaterptf)\nlibrary(xtable)  # latex tables\nlibrary(xts)  # time series handling\n\n# load data\nload(\"data/portugal/meteo_HS.Rdata\")\nHS.full <- met_full\nload(\"data/portugal/meteo_NSA.Rdata\")\nNSA.full <- met_full\nmeteo <- na.omit(read.csv(\"data/portugal/meteo_ok.csv\", header=T))\nsoildata <- read.table(\"data/portugal/soildata.dat\", header=T)\nwc.data.HS <- read.table(\"data/portugal/soil_moisture_HS.txt\", header=T,\n                         sep=\"\\t\")\nwc.data.NSA <- read.table(\"data/portugal/soil_moisture_NSA.txt\", header=T,\n                          sep=\"\\t\")\n\n# PREPROCESSING ----------------------------------------------------------------\n\nengine <- paste(output, \"portugal\", sep=\"_\")  # engine name: output_location\nyears <- min(meteo$year, format(index(HS.full), \"%Y\"),\n             format(index(NSA.full), \"%Y\")):\n         max(meteo$year, format(index(HS.full), \"%Y\"),\n             format(index(NSA.full), \"%Y\"))\n\n# time step in seconds\nif (output == \"evap\") {\n  dt <- 3600\n} else if (output == \"glorad\") {\n  dt <- 86400\n  A$sundur <- 1\n} else if (output == \"gloradmax\") {\n  dt <- 3600\n} else if (output == \"rad_net\") {\n  dt <- 3600\n} else if (output == \"radex\") {\n  dt <- 3600\n} else if (output == \"soilheat\") {\n  dt <- 3600\n}\n\n# data & variable & parameter selection\nselection <- echseSelect(output)\n\n# structures\nHS.list <- NULL\nNSA.list <- NULL\nmeteo.list <- NULL\nHS.names <- c(expression(Net~Radiation~(W~m^{-2})),\n              expression(Temperature~(degree~C)),\n              expression(Soil~heat~flux~(W~m^{-2})),\n              expression(Soil~moisture~content~(-{})),\n              expression(Sensible~heat~flux~(W~m^{-2})),\n              expression(Latent~heat~flux~(W~m^{-2})),\n              expression(Bowen~ratio~(-{})),\n              expression(Evaporation~(mm~h^{-1})),\n              expression(Vapor~pressure~deficit~(kPa)),\n              expression(Vapor~pressure~(kPa)),\n              expression(Wind~speed~(m~s^{-1})))\nNSA.names <- HS.names\nmeteo.names <- c(\"PARgl (unit?)\",\n                 \"PARdif (unit?)\",\n                 expression(Incoming~radiation~SW~(W~m^{-2})),\n                 expression(Outgoing~radiation~LW~(W~m^{-2})),\n                 expression(Temperature~(degree~C)),\n                 expression(Relative~humidity~(\"%\")),\n                 expression(Rainfall~(mm~d^{-1})),\n                 expression(Barometric~pressure~(hPa)))\n\n# FIELD STATION DATA\n\ntzone(HS.full) <- \"UTC\"\ntzone(NSA.full) <- \"UTC\"\n\n# fill up missing dates\nHS.full <- merge(xts(order.by=seq(index(HS.full)[1],\n                                  tail(index(HS.full), 1), by=\"hours\")), \n                 HS.full, tzone=\"UTC\")\nNSA.full <- merge(xts(order.by=seq(index(NSA.full)[1],\n                                   tail(index(NSA.full), 1), by=\"hours\")), \n                  NSA.full, tzone=\"UTC\")\n\n# create mask of NA intervals\nif (field.station == \"HS\") {\n  na.mask <- sort(unique(do.call(c, lapply(list(HS.full[, \"R\"], \n                                                HS.full[, \"T\"], \n                                                HS.full[, \"G\"], \n                                                HS.full[, \"theta\"], \n                                                HS.full[, \"u\"]),\n                                           function(x)\n                                             index(HS.full)[is.na(x)]))))\n} else {\n  na.mask <- sort(unique(do.call(c, lapply(list(NSA.full[, \"R\"], \n                                                NSA.full[, \"T\"], \n                                                NSA.full[, \"G\"], \n                                                NSA.full[, \"theta\"], \n                                                NSA.full[, \"u\"]),\n                                           function(x)\n                                             index(NSA.full)[is.na(x)]))))\n}\n\n# check no.na criterion\nna.present <- any(!is.na(match(as.character(seq(as.POSIXct(tstart), \n                                                as.POSIXct(tend), \n                                                by=paste(dt, \"sec\"))),\n                               as.character(na.mask))))\nif (no.na && na.present)\n  stop(\"Model period contains missing data and no.na == TRUE.\")\n\n# split data into list elements for further processing\nfor (i in 1:length(HS.names)) {\n  HS.list <- c(HS.list, \n               list(xts(order.by=index(HS.full[format(as.Date(tend), \"%Y\"), ]),\n                        HS.full[format(as.Date(tend), \"%Y\"), i])))\n  NSA.list <- c(NSA.list, \n                list(xts(order.by=index(NSA.full[format(as.Date(tend),\n                                                        \"%Y\"), ]),\n                         NSA.full[format(as.Date(tend), \"%Y\"), i])))\n}\n\n# soil moisture data\nwc.data.HS.xts <- xts(wc.data.HS$sm, order.by=as.POSIXct(wc.data.HS$date))\nwc.data.NSA.xts <- xts(wc.data.NSA$sm, order.by=as.POSIXct(wc.data.NSA$date))\nif (!wc.new) {\n  # Set soil moisture to zero where negative ...\n  HS.list[[4]][HS.list[[4]] < 0] <- 0\n  NSA.list[[4]][NSA.list[[4]] < 0] <- 0\n} else {\n  # ... or use new data instead.\n  date.rg.HS <- range(index(HS.list[[4]]))\n  date.rg.NSA <- range(index(NSA.list[[4]]))\n  HS.list[[4]] <- wc.data.HS.xts[index(wc.data.HS.xts) >= date.rg.HS[1]\n                                 & index(wc.data.HS.xts) <= date.rg.HS[2]]\n  NSA.list[[4]] <- wc.data.NSA.xts[index(wc.data.NSA.xts) >= date.rg.NSA[1]\n                                   & index(wc.data.NSA.xts) <= date.rg.NSA[2]]\n}\n\n# METEO STATION DATA\n\nmeteo$date <- NA  # date (Y-m-d)\n\n# hhmm==0 is understood as 24:00 in file but as 0:00 here;\n# therefore increase doy by 1\n# i.e. \"doy=320, hhmm=0\" becomes \"doy=321, hhmm=0\"\nmeteo$doy[which(meteo$hhmm == 0)] <- meteo$doy[which(meteo$hhmm == 0)] + 1\n\n# convert dates into POSIX-readable dates\nfor (j in 1:length(years)) {\n  meteo$date[meteo$year == years[j]] <- \n    as.Date(meteo$doy[which(meteo$year == years[j])], \n            origin=paste0(years[j] - 1, \"-12-31\"))\n}\nmeteo$date <- as.Date(meteo$date)\nhours <- sprintf(\"%02d\", floor(meteo$hhmm / 100))\nminutes <- sprintf(\"%02d\", meteo$hhmm - (floor(meteo$hhmm / 100) * 100))\nseconds <- sprintf(\"%02d\", rep(0, length(meteo$hhmm)))\nmeteo$dati <- paste0(meteo$date, \" \", hours, \":\", minutes, \":\", seconds)\n\n# select relevant columns, convert to xts\nmeteo <- meteo[, -c(1, 2, 3, 4, ncol(meteo) - 2, ncol(meteo) - 1)]\nmeteo.xts <- xts(meteo[2:nrow(meteo), ],\n                 order.by=as.POSIXct(meteo$dati[1:(nrow(meteo) - 1)],\n                                     tz=\"UTC\"),\n                 tzone=\"UTC\")\n\n# fill up missing dates\nsuppressWarnings(\n  meteo.xts <- merge(xts(order.by=seq(index(meteo.xts)[1], \n                                      tail(index(meteo.xts), 1), \n                                      by=\"30 min\"), tzone=\"UTC\"), \n                     meteo.xts, tzone=\"UTC\")\n)\n\n# time sequence\ntime.seq <- echseTimeSeq(index(meteo.xts), tstart, dt)\n\n# split data into list elements for further processing\nfor (k in 1:8)\n  meteo.list[[k]] <- meteo.xts[, k + 1]\n\n# fill up missing global radiation data with meteo data\nna.dates.HS.r <- index(HS.list[[1]][is.na(HS.list[[1]])])\nna.dates.NSA.r <- index(NSA.list[[1]][is.na(NSA.list[[1]])])\nHS.list[[1]][na.dates.HS.r] <- ifelse(length(na.dates.HS.r) != 0,\n                                      meteo.list[[3]][na.dates.HS.r], NA)\nNSA.list[[1]][na.dates.NSA.r] <- ifelse(length(na.dates.NSA.r) != 0,\n                                        meteo.list[[3]][na.dates.NSA.r], NA)\n\n# fill up missing temperature data with meteo data\nna.dates.HS.t <- index(HS.list[[2]][is.na(HS.list[[2]])])\nna.dates.NSA.t <- index(NSA.list[[2]][is.na(NSA.list[[2]])])\nHS.list[[2]][na.dates.HS.t] <- ifelse(length(na.dates.HS.t) != 0,\n                                      meteo.list[[5]][na.dates.HS.t], NA)\nNSA.list[[2]][na.dates.NSA.t] <- ifelse(length(na.dates.NSA.t) != 0,\n                                        meteo.list[[5]][na.dates.NSA.t], NA)\n\n# derive sunshine hours according to WMO, 2003 (time for which rad > 120 W.m-2)\nif (dt == 86400) {\n  rad <- meteo.xts[index(meteo.xts) >= time.seq[1] & \n                   index(meteo.xts) <= tail(time.seq, 1), 3]\n  # add up to multiple of 48 length\n  length(rad) <- length(rad) + 48 - length(rad) %% 48\n  # matrix with days (rows) and 48 half hours (columns)\n  rad.mat <- matrix(rad, ncol=48, byrow=T)\n  sundur.val <- c()\n  days <- 1:nrow(rad.mat)\n  for (i in days)\n    sundur.val[i] <- length(rad.mat[i, na.omit(rad.mat[i, ]) > 120]) / 2\n  sundur.xts <- xts(sundur.val,\n                    order.by=seq(index(meteo.xts[time.seq])[1],\n                                 tail(index(meteo.xts[time.seq]), 1),\n                                 by=paste(dt, \"sec\")))\n}\n\n# ENGINE PARAMETERS ------------------------------------------------------------\n\n# INDIVIDUAL PARAMETERS\n\n# geographical parameters: Silveira, Santarem, Portugal\nlat <- 39.14\nlon <- 8.33\nelev <- 160  # in m\n\n# soil parameters, soil type: loamy sand (FAO)\nclay <- soildata[1, \"clay\"]\nsilt <- soildata[1, \"silt\"]\nsom <- soildata[1, \"som\"]\nsoil_dens <- 1500  # bulk density, estimated from different sources\nsoilprop <- data.frame(clay=clay, bulkD=soil_dens / 1000, silt=silt, om=som)\nwc_sat <- ptf.wosten.theta.s(clay=clay, bulkD=soil_dens / 1000, silt=silt,\n                             om=som, topSoil=1)\nwc_pwp <- pft.rawls(soilprop, parameters=\"theta\", h=15000)[, \"theta\"]\nwc_res <- pft.rawls(soilprop, parameters=\"theta_r\", h=0)[, \"theta_r\"]\n# field capacity for estimation of wc_etmax\nwc_fc <- pft.rawls(soilprop, parameters=\"theta\", h=316)[, \"theta\"]\n# wc_etmax is a calibration parameter! This is only a rough estimation:\nwc_etmax <- .8 * wc_fc\nbubble <- pft.rawls(soilprop, parameters=\"h_b\", h=0)[, \"h_b\"]\npores_ind <- pft.rawls(soilprop, parameters=\"lambda\", h=0)[, \"lambda\"]\n\n# check if measured water content undercuts parameter value\nif (any(HS.list[[4]] < wc_res))\n  wc_res <- min(na.omit(HS.list[[4]]))\n\n# plant parameters\ncrop_faoref <- 1\ncrop_makk <- .8\nglo_half <- 200\npar_stressHum <- .03\nres_leaf_min <- 50\nwstressmax <- 10000\nwstressmin <- 100\n\n# collect individual parameters\nparamNum <- list(bubble=bubble, crop_faoref=crop_faoref, crop_makk=crop_makk,\n                 elev=elev, glo_half=glo_half, lat=lat, lon=lon,\n                 par_stressHum=par_stressHum, pores_ind=pores_ind,\n                 res_leaf_min=res_leaf_min, soil_dens=soil_dens,\n                 wc_etmax=wc_etmax, wc_pwp=wc_pwp, wc_res=wc_res,\n                 wc_sat=wc_sat, wstressmax=wstressmax, wstressmin=wstressmin)\n\n# write parameter list to latex table\nnames.pN <- sapply(names(paramNum),\n                   function(name)\n                     paste0(\"\\\\\", \"verb!\", name, \"!\"))\ncomm.pN <- c(paste0(\"PTF by \\\\\", \"citet{rawls85}\"),\n             \"evaporation of reference crop\",\n             paste0(\"Eq. \\\\\", \"eqref{eq:cropmakk}\"),\n             \"local elevation map\", \"guessed\", \"GIS data\", \"ditto\",\n             \"guessed\", paste0(\"PTF by \\\\\", \"citet{rawls85}\"), \"guessed\",\n             \"guessed\", \"calibration\", paste0(\"PTF by \\\\\", \"citet{rawls85}\"),\n             paste0(\"(PTF by \\\\\", \"citet{rawls85})\"),\n             paste0(\"PTF by \\\\\", \"citet{woesten99}\"),\n             \"wilting point\", \"field capacity\")\nparamNum.df <- data.frame(Parameter=names.pN,\n                          Value=as.numeric(paramNum),\n                          Unit=c(\"hPa\", \"--\", \"--\", \"m\", \"W m$^{-2}$\", \"°\",\n                                 \"°\", \"hPa$^{-1}$\", \"--\", \"s m$^{-1}$\",\n                                 \"kg m$^{-3}$\", \"--\", \"--\", \"--\", \"--\", \"hPa\",\n                                 \"hPa\"),\n                          Comment=comm.pN)\nparamNum.tex <- xtable(paramNum.df, align=c(\"c\", \"l\", \"r\", \"l\", \"l\"),\n                       caption=paste0(\"Object-specific scalar parameters \",\n                                      \"(\\\\\", \"textsf{paramNum}), \",\n                                      field.station, \" Portugal\"),\n                       label=paste0(\"tab:portugal\", field.station, \"_paramNum\"))\nprint.xtable(paramNum.tex,\n             file=paste0(\"doku/portugal\", field.station, \"_paramNum.tex\"),\n             include.rownames=F, sanitize.text.function=identity,\n             caption.placement=\"top\")\n\n# SHARED PARAMETERS\n\nchoice_gloradmax <- 1\nchoice_plantDispl <- 1\nchoice_rcs <- 1\nchoice_roughLen <- 2\ndrag_coef <- .07\neddy_decay <- 2.5\nemis_a <- .34\nemis_b <- -.14\next <- .4\nf_day <- .1\nf_night <- .7\nfcorr_a <- 1.35\nfcorr_b <- -.35\nh_humMeas <- ifelse(field.station==\"NSA\", 4.84, 2)\nh_tempMeas <- ifelse(field.station==\"NSA\", 4.84, 2)\nh_windMeas <- ifelse(field.station==\"NSA\", 4.84, 2)\nna_val <- \"-9999.\"\nradex_a <- .25\nradex_b <- .5\nres_b <- 25\nrough_bare <- .01\nrss_a <- 37.5  # calibration...\nrss_b <- -1.23  # calibration...\n\n# derive f_day and f_night parameters from soil heat flux and net radiation\n# ... Remember to run the rad_net_* engine first!\nif (output != \"rad_net\") {\n  f.out <- echseParEst(\"f\",\n                       rnetfile=paste0(\"~/uni/projects/rad_net_portugal/run\",\n                                       \"/out/\", field.station,\n                                       \"/test1.txt\"),\n                       sheatfile=paste0(\"~/uni/projects/evap_portugal\",\n                                        \"/data/forcing/meteo/05_meteofill/out/\",\n                                        field.station, \"/soilheat_data.dat\"),\n                       lat=lat, lon=lon, plots=F)\n  f_day <- f.out[1]\n  f_night <- f.out[2]\n}\n\n# derive radex parameters from global radiation and extraterr. radiation\n# ... Remember to run the radex_* engine first!\nif (output != \"radex\") {\n  radex.out <- echseParEst(\"radex\",\n                           rxfile=paste0(\"~/uni/projects/radex_portugal\",\n                                         \"/run/out/\", field.station,\n                                         \"/test1.txt\"),\n                           grfile=paste0(\"~/uni/projects/evap_portugal\",\n                                         \"/data/forcing/meteo/05_meteofill/out/\",\n                                         field.station, \"/glorad_data.dat\"),\n                           r.quantile=0.05, plots=T)\n  radex_a <- radex.out[1]\n  radex_b <- radex.out[2]\n}\n\nif (fcorr_a + fcorr_b != 1)\n  stop(\"The sum of fcorr_a and fcorr_b must equal 1!\")\n\n# collect shared parameters\nsharedParamNum <- list(choice_et=et.choice[2],\n                       choice_gloradmax=choice_gloradmax,\n                       choice_plantDispl=choice_plantDispl,\n                       choice_rcs=choice_rcs, choice_roughLen=choice_roughLen,\n                       drag_coef=drag_coef, eddy_decay=eddy_decay,\n                       emis_a=emis_a, emis_b=emis_b, ext=ext, f_day=f_day,\n                       f_night=f_night, fcorr_a=fcorr_a, fcorr_b=fcorr_b,\n                       h_humMeas=h_humMeas, h_tempMeas=h_tempMeas,\n                       h_windMeas=h_windMeas, na_val=na_val, radex_a=radex_a,\n                       radex_b=radex_b, res_b=res_b, rough_bare=rough_bare,\n                       rss_a=rss_a, rss_b=rss_b)\n\n# write parameter list to latex table\nnames.sPN <- sapply(names(sharedParamNum),\n                    function(name)\n                      paste0(\"\\\\\", \"verb!\", name, \"!\"))\ncomm.sPN <- c(\"calibration\",\n              paste0(\"as used by \\\\\", \"citet{shuttleworth85} from \\\\\",\n              \"citet{monteith73}\"),\n              paste0(\"as used by \\\\\", \"citet{maidment93} for average \",\n                     \"conditions\"),\n              \"ditto\", \"guessed\", \"estimation from soil heat data\",\n              \"ditto\", paste0(\"as used by \\\\\", \"citet{maidment93}\"), \"ditto\",\n              \"\", \"\", \"\", \"estimation from radiation data\", \"ditto\",\n              paste0(\"as used by \\\\\", \"citet{shuttleworth85}\"), \"ditto\", \"\", \"\")\nsharedParamNum.df <- data.frame(Parameter=names.sPN[-c(1:5, 18)],\n                                Value=as.numeric(sharedParamNum)[-c(1:5, 18)],\n                                Unit=c(\"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\",\n                                       \"--\", \"--\", \"m\", \"m\", \"m\", \"--\",\n                                       \"--\", \"s m$^{-1}$\", \"m\", \"--\", \"--\"),\n                                Comment=comm.sPN)\nsharedParamNum.tex <- xtable(sharedParamNum.df,\n                             align=c(\"c\", \"l\", \"r\", \"l\", \"l\"),\n                             caption=paste0(\"Group-specific \",\n                                            \"scalar parameters \",\n                                            \"(\\\\\", \"textsf{sharedParamNum}), \",\n                                            field.station, \" Portugal\"),\n                             label=paste0(\"tab:portugal\", field.station,\n                                          \"_sharedParamNum\"))\nprint.xtable(sharedParamNum.tex,\n             file=paste0(\"doku/portugal\", field.station, \"_sharedParamNum.tex\"),\n             include.rownames=F, sanitize.text.function=identity,\n             caption.placement=\"top\")\n\n# EXTERNAL INPUT PARAMETERS (alb, cano_height, lai)\n\nalb <- 0.3\ncano_height <- ifelse(field.station==\"NSA\", 7.98, 0.20)\nlai <- ifelse(field.station == \"NSA\", 1.397, 0.778)\n\ninputExt.df <- data.frame(Parameter=c(paste0(\"\\\\\", \"verb!alb!\"),\n                                      paste0(\"\\\\\", \"verb!cano_height!\"),\n                                      paste0(\"\\\\\", \"verb!lai!\")),\n                          Value=c(alb, cano_height, lai),\n                          Unit=c(\"--\", \"m\", \"--\"))\ninputExt.tex <- xtable(inputExt.df, align=c(\"c\", \"l\", \"r\", \"l\"),\n                       caption=paste0(\"Time-dependent parameters \",\n                                      \"(\\\\\", \"textsf{inputExt}), \",\n                                      field.station, \" Portugal\"),\n                       label=paste0(\"tab:portugal\", field.station,\n                                    \"_inputExt\"))\nprint.xtable(inputExt.tex,\n             file=paste0(\"doku/portugal\", field.station, \"_inputExt.tex\"),\n             include.rownames=F, sanitize.text.function=identity,\n             caption.placement=\"top\")\n\n# WRITE DATA INPUT FILES -------------------------------------------------------\n\n# alb (Albedo, -, AVER)\nechseInput(engine=engine, \n           variable=\"alb\",\n           stn=field.station,\n           const=alb,\n           t.seq=time.seq,\n           directory=paste0(\"vegPar_time_series/\", field.station, \"/\"))\n\n# apress (Air Pressure, hPa, AVER)\nechseInput(engine=engine, \n           variable=\"apress\", \n           na.val=mean(as.numeric(meteo.list[[8]]), na.rm=T), \n           stn=\"Met\", \n           column=8, \n           t.seq=time.seq,\n           directory=paste0(\"forcing/meteo/05_meteofill/out/\", field.station,\n                            \"/\"))\n\n# cano_height (Canopy Height, m, AVER)\nechseInput(engine=engine,\n           variable=\"cano_height\",\n           stn=field.station,\n           const=cano_height,\n           t.seq=time.seq,\n           directory=paste0(\"vegPar_time_series/\", field.station, \"/\"))\n\n# doy (Day of Year, d)\ndoy.df <- data.frame(end_of_interval=format(time.seq, \"%Y-%m-%d %H:%M:%S\"),\n                     as.numeric(strftime(time.seq, \"%j\", tz=\"UTC\")))\nnames(doy.df)[2] <- \"any\"\nwrite.matrix(doy.df, \n             paste0(\"~/uni/projects/\", engine,\n                    \"/data/vegPar_time_series/\", field.station,\n                    \"/doy_data.dat\"), sep=\"\\t\")\n\n# glorad (Global Radiation, W.m-2, AVER)\nechseInput(engine=engine,\n           variable=\"glorad\",\n           stn=\"Met\",\n           column=3,\n           t.seq=time.seq,\n           directory=paste0(\"forcing/meteo/05_meteofill/out/\", field.station,\n                            \"/\"))\n\n# hour (Hour of Day, h)\nhour.df <- data.frame(end_of_interval=format(time.seq, \"%Y-%m-%d %H:%M:%S\"),\n                      as.numeric(strftime(time.seq, \"%H\", tz=\"UTC\")))\nnames(hour.df)[2] <- \"any\"\nwrite.matrix(hour.df,\n             paste0(\"~/uni/projects/\", engine, \n                    \"/data/vegPar_time_series/\", field.station,\n                    \"/hour_data.dat\"), sep=\"\\t\")\n\n# lai (Leaf Area Index, -, AVER)\nechseInput(engine=engine,\n           variable=\"lai\",\n           stn=field.station,\n           const=lai,\n           t.seq=time.seq,\n           directory=paste0(\"vegPar_time_series/\", field.station, \"/\"))\n\n# rad_net (Net Incoming Radiation, W.m-2, AVER)\nechseInput(engine=engine,\n           variable=\"rad_net\",\n           na.val=0,  # not perfect\n           stn=field.station,\n           column=1,\n           t.seq=time.seq,\n           directory=paste0(\"forcing/meteo/05_meteofill/out/\", field.station,\n                            \"/\"))\n\n# rhum (Relative Humidity, %, AVER)\nechseInput(engine=engine,\n           variable=\"rhum\",\n           na.val=mean(as.numeric(meteo.list[[6]]), na.rm=T), \n           stn=\"Met\",\n           column=6,\n           t.seq=time.seq,\n           directory=paste0(\"forcing/meteo/05_meteofill/out/\", field.station,\n                            \"/\"))\n\n# soilheat (Soil Heat Flux, W.m-2, AVER)\nechseInput(engine=engine,\n           variable=\"soilheat\",\n           na.val=mean(get(paste0(field.station, \".list\"))[[3]],\n                       na.rm=T),  # not perfect\n           stn=field.station,\n           column=3,\n           t.seq=time.seq,\n           directory=paste0(\"forcing/meteo/05_meteofill/out/\", field.station,\n                            \"/\"))\n\n# sundur (Sunshine Duration, h, CUMU)\nif (A$sundur == 1) {\n  sundur.df <- data.frame(end_of_interval=format(index(sundur.xts),\n                                                 \"%Y-%m-%d %H:%M:%S\"),\n                          sundur.xts)\n  names(sundur.df)[2] <- \"Met\"\n  write.matrix(sundur.df,\n               paste0(\"~/uni/projects/\", engine,\n                      \"/data/forcing/meteo/05_meteofill/out/\", field.station,\n                      \"/sundur_data.dat\"),\n               sep=\"\\t\")\n}\n\n# temper (Mean Temperature over Time Interval, degC, AVER)\nechseInput(engine=engine, \n           variable=\"temper\", \n           na.val=mean(get(paste0(field.station, \".list\"))[[2]],\n                       na.rm=T),  # not perfect\n           stn=field.station, \n           column=2, \n           t.seq=time.seq,\n           directory=paste0(\"forcing/meteo/05_meteofill/out/\", field.station,\n                            \"/\"))\n\n# utc_add (Deviation of Time Zone from UTC, h)\nechseInput(engine=engine,\n           variable=\"utc_add\",\n           stn=\"any\",\n           const=0,\n           t.seq=time.seq,\n           directory=paste0(\"vegPar_time_series/\", field.station, \"/\"))\n\n# wc_vol_root (Water Content in Root Zone, -, AVER)\nechseInput(engine=engine,\n           variable=\"wc_vol_root\",\n           na.val=wc_res,\n           stn=field.station,\n           column=4,\n           t.seq=time.seq,\n           directory=paste0(\"forcing/meteo/05_meteofill/out/\", field.station,\n                            \"/\"))\n\n# wc_vol_top (Water Content in Topsoil, -, AVER)\nechseInput(engine=engine,\n           variable=\"wc_vol_top\",\n           na.val=wc_res,\n           stn=field.station,\n           column=4,\n           t.seq=time.seq,\n           directory=paste0(\"forcing/meteo/05_meteofill/out/\", field.station,\n                            \"/\"))\n\n# wind (Wind Speed, m.s-1, AVER)\nechseInput(engine=engine, \n           variable=\"wind\", \n           na.val=mean(get(paste0(field.station, \".list\"))[[11]],\n                       na.rm=T),  # not perfect\n           stn=field.station, \n           column=11, \n           t.seq=time.seq,\n           directory=paste0(\"forcing/meteo/05_meteofill/out/\", field.station,\n                            \"/\"))\n\n# calibration off.\n\n# WRITE MODEL CONTROL FILES ----------------------------------------------------\n\nechseCtrl_cnf(engine, tstart, tend, dt)\nechseCtrl_out(engine, output, et.choice[1])\nechseCtrl_loc(engine, selection$DAT, A, locs)\nechseCtrl_fil(engine, field.station, selection$DAT, A, past=T)\nechseCtrl_shpar(engine, sharedParamNum, selection$SHP)\nechseCtrl_par(engine, paramNum, selection$PAR)\nechseCtrl_ini(engine, selection$STV, selection$I)\n\n# CALL MODEL RUN & POSTPROCESSING ----------------------------------------------\n\nechsePost(engine, et.choice, ma.width=1, field.station=field.station, \n          comp=output, wc_etmax=wc_etmax)\n\n# SHOW RESULTS -----------------------------------------------------------------\n\nSys.sleep(1.0)\n\ndstart <- strsplit(tstart, \" \")[[1]][1]\ndend <- strsplit(tend, \" \")[[1]][1]\n\nif (output == \"evap\") {\n  comp.file <- paste0(\"plot_et_compare_portugal_\", field.station, \"_\", dstart,\n                      \"_\", dend, \".pdf\")\n  cum.file <- paste0(\"plot_et_cum_portugal_\", field.station, \"_\", dstart, \"_\",\n                     dend, \".pdf\")\n} else if (output %in% c(\"glorad\", \"rad_net\", \"soilheat\")) {\n  comp.file <- paste0(\"plot_\", output, \"_compare_portugal_\", field.station, \"_\",\n                      dstart, \"_\", dend, \".pdf\")\n  cum.file <- paste0(\"plot_\", output, \"_cum_portugal_\", field.station, \"_\",\n                     dstart, \"_\", dend, \".pdf\")\n}\n\nif (is.null(warnings())) {\n  if (output == \"evap\") {\n    system(paste0(\"cd ~/boxup/whk_echse; evince \", comp.file, \" &\"))\n  } else if (output %in% c(\"glorad\", \"rad_net\", \"soilheat\")) {\n    system(paste0(\"cd ~/boxup/whk_echse; evince \", comp.file, \" &\"))\n  }\n}\n\n# SAVE RESULTS -----------------------------------------------------------------\n\nif (output == \"evap\") {\n  if (et.choice[2] == 1) {\n    method <- \"makkink\"\n  } else if (et.choice[2] == 11) {\n    method <- \"penman\"\n  } else if (et.choice[2] == 12) {\n    method <- \"faoref\"\n  } else {\n    method <- \"shuttleworth\"\n  }\n}\n\nif (is.null(warnings())) {\n  if (output == \"evap\") {\n    # copy plot for comparison to archive directory\n    system(paste0(\"cd ~/boxup/whk_echse; cp \", comp.file,\n                  \" results/evap_portugal/\", et.choice[1], \"_\", method, \"/\"))\n    # copy cumulative plot to archive dir\n    system(paste0(\"cd ~/boxup/whk_echse; cp \", cum.file,\n                  \" results/evap_portugal/\", et.choice[1], \"_\", method, \"/\"))\n    # copy simulation results to archive dir\n    system(paste0(\"cd ~/uni/projects/evap_portugal/run/out; cp test1.txt \",\n                  field.station, \"/test1.txt\"))\n  } else if (output %in% c(\"glorad\", \"rad_net\", \"soilheat\")) {\n    # copy plot for comparison to archive directory\n    system(paste0(\"cd ~/boxup/whk_echse; cp \", comp.file, \" results/\", engine,\n                  \"/\"))\n    # copy cumulative plot to archive dir\n    system(paste0(\"cd ~/boxup/whk_echse; cp \", cum.file, \" results/\", engine,\n                  \"/\"))\n    # copy simulation results to archive dir\n    system(paste0(\"cd ~/uni/projects/\", engine, \"/run/out; cp test1.txt \",\n                  field.station, \"/test1.txt\"))\n  } else if (output %in% c(\"gloradmax\", \"radex\")) {\n    # copy simulation results to archive dir\n    system(paste0(\"cd ~/uni/projects/\", engine, \"/run/out; cp test1.txt \",\n                  field.station, \"/test1.txt\"))\n  }\n}\n",
    "created" : 1481711395241.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "959010868",
    "id" : "29D46DC2",
    "lastKnownWriteTime" : 1490350714,
    "last_content_update" : 1490350714214,
    "path" : "~/boxup/whk_echse/echse_portugal.R",
    "project_path" : "echse_portugal.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}