{
    "collab_server" : "",
    "contents" : "################################################################################\n# Author: Julius Eberhard\n# Last Edit: 2016-10-24\n# Project: ECHSE Evapotranspiration\n# Program: echse_morocco\n# Aim: Data Preprocessing and Main Executing Script for ET in Morocco\n################################################################################\n\nrm(list=ls())\nassign(\"last.warning\", NULL, envir=baseenv())\n\n# set time zone to UTC\nSys.setenv(TZ=\"UTC\")\n\n# PROGRAM PARAMETERS ------------------------------------------------------------\n\noutput <- \"evap\"  # output quantity [evap, glorad, gloradmax, rad_net, radex]\nfield.station <- \"Met\"  # [Met]\net.choice <- \"etp\"  # Potential or actual evapotranspiration? [etp, eta]\net.choice[2] <- 13  # model for calculation [1=Makk, 11=PM, 12=FAO, 13=SW]\ntstart <- \"2013-06-15 00:00:00\"  # start of model period, note the format!\ntend <- \"2013-09-20 15:00:00\"  # end of model period, note the format!\n\n# declare availability of input data\nA <- list(alb=1,\n          apress=1,\n          cano_height=1,\n          cloud=0,\n          doy=1,\n          glorad=1,\n          glorad_max=0,\n          hour=1,\n          lai=1,\n          rad_long=0,\n          rad_net=0,\n          rad_net_soil=0,\n          radex=0,\n          rhum=1,\n          soilheat=0,\n          sundur=0,\n          temp_max=0,\n          temp_min=0,\n          temper=1,\n          totalheat=0,\n          utc_add=1,\n          wc_vol_root=1,\n          wc_vol_top=1,\n          wind=1)\n\n# locations\nlocs <- list(field.station,  # alb\n             \"Met\",  # apress\n             field.station,  # cano_height\n             \"any\",  # cloud, not actually used\n             \"any\",  # doy\n             \"Met\",  # glorad\n             \"any\",  # glorad_max\n             \"any\",  # hour\n             field.station,  # lai\n             \"any\",  # rad_long\n             field.station,  # rad_net\n             \"any\",  # rad_net_soil\n             \"any\",  # radex\n             \"Met\",  # rhum\n             field.station,  # soilheat\n             \"Met\",  # sundur\n             \"any\",  # temp_max\n             \"any\",  # temp_min\n             field.station,  # temper\n             \"any\",  # totalheat\n             \"any\",  # utc_add\n             field.station,  # wc_vol_root\n             field.station,  # wc_vol_top\n             field.station)  # wind\n\n# SET AND LOAD -----------------------------------------------------------------\n\n# set working directory\nif (system(\"hostname\", intern=T) == \"raspberrypi\") {\n  setwd(\"/home/pi/ownCloud/whk_echse\")\n} else {\n  setwd(\"/home/julius/boxup/whk_echse\")\n}\n\n# load scripts\nsource(\"~/R/jufun.R\")  # CheckPack()\nsource(\"echseCtrl.R\")  # control files\nsource(\"echseInput.R\")  # data input files\nsource(\"echseParEst.R\")  # parameter estimation\nsource(\"echsePost.R\")  # postprocessing\nsource(\"echsePre.R\")  # preprocessing\n\n# load packages\nCheckPack(c(\"MASS\", \"RAtmosphere\", \"soilwaterptf\", \"TTR\", \"xtable\", \"xts\"))\nlibrary(MASS)  # write.matrix()\nlibrary(soilwaterptf)\nlibrary(xtable)  # latex tables\nlibrary(xts)  # time series handling\n\n# load data\n# latent heat & actual evapotranspiration\nle.eta.day <- read.csv(\"data/morocco/latent_heat_daily.csv\")\nle.30m <- read.csv(\"data/morocco/latent_heat_halfhourly.csv\")\n# meteo station: rel hum, global rad, air temp, wind\nmeteo <- read.csv(\"data/morocco/ET0.csv\")\nsoildata <- read.table(\"data/morocco/soildata.dat\", header=T)\n\n# PREPROCESSING ----------------------------------------------------------------\n\nengine <- paste(output, \"morocco\", sep=\"_\")  # engine name: output_location\n\n# time step in seconds\nif (output == \"evap\") {\n  dt <- 3600\n} else if (output == \"glorad\") {\n  dt <- 86400\n  A$sundur <- 1\n} else if (output == \"gloradmax\") {\n  dt <- 86400\n} else if (output == \"rad_net\") {\n  dt <- 3600\n} else if (output == \"radex\") {\n  dt <- 3600\n} else if (output == \"soilheat\") {\n  dt <- 3600\n}\n\n# data & variable & parameter selection\nselection <- echseSelect(output)\n\n# structures\nmeteo.list <- NULL\nmeteo.names <- c(expression(Relative~humidity~(\"%\")),\n                 expression(Global~radiation~(W~m^{-2})),\n                 expression(Air~temperature(degree~C)),\n                 expression(Wind~(m~s^{-1})))\n\n# LATENT HEAT & ACTUAL ET DATA\n\nle.day.xts <- xts(le.eta.day[, 2],\n                  order.by=as.POSIXct(le.eta.day[, 1], format=\"%m/%d/%Y\"),\n                  tzone=\"UTC\")\neta.day.xts <- xts(le.eta.day[, 3],\n                   order.by=as.POSIXct(le.eta.day[, 1], format=\"%m/%d/%Y\"),\n                   tzone=\"UTC\")\nle.30m.dati <- paste(as.character(le.30m[, 1]),\n                     as.character(le.30m[, 2]))\nle.30m.xts <- xts(le.30m[, 3],\n                  order.by=as.POSIXct(le.30m.dati, format=\"%m/%d/%Y %H:%M:%S\"),\n                  tzone=\"UTC\")\n\n# fill up missing dates\nle.30m.xts <- merge(xts(order.by=seq(index(le.30m.xts)[1], \n                                     tail(index(le.30m.xts), 1), by=\"hours\")),\n                    le.30m.xts, tzone=\"UTC\")\n\n# METEO STATION DATA\n\nmeteo.dati <- paste(as.character(meteo[, 1]), as.character(meteo[, 2]))\nmeteo.xts <- xts(meteo[, 2:ncol(meteo)],\n                 order.by=as.POSIXct(meteo.dati, format=\"%m/%d/%Y %H:%M\"),\n                 tzone=\"UTC\")\n\n# fill up missing dates\nsuppressWarnings(\n  meteo.xts <- merge(xts(order.by=seq(index(meteo.xts)[1],\n                                      tail(index(meteo.xts), 1),\n                                      by=\"30 min\")),\n                     meteo.xts, tzone=\"UTC\")\n)\n\n# time sequence\ntime.seq.min <- seq(max(c(index(meteo.xts)[1], index(le.30m.xts)[1])),\n                    min(c(tail(index(meteo.xts), 1),\n                          tail(index(le.30m.xts), 1))),\n                    by=\"30 min\")\ntime.seq <- echseTimeSeq(time.seq.min, tstart, dt)\n\n# split data into list elements for further processing\nfor (i in c(2, 3, 5, 6))\n  meteo.list <- c(meteo.list,\n                  list(xts(order.by=index(meteo.xts), meteo.xts[, i])))\n\n# derive sunshine hours according to WMO, 2003 (time for which rad > 120 W.m-2)\nif (dt == 86400) {\n  rad <- meteo.xts[index(meteo.xts) >= time.seq[1] & \n                     index(meteo.xts) <= tail(time.seq, 1), 3]\n  # add up to multiple of 48 length\n  length(rad) <- length(rad) + 48 - length(rad) %% 48\n  # matrix with days (rows) and 48 half hours (columns)\n  rad.mat <- matrix(rad, ncol=48, byrow=T)\n  sundur.val <- c()\n  days <- 1:nrow(rad.mat)\n  for (i in days)\n    sundur.val[i] <- length(rad.mat[i, na.omit(rad.mat[i, ]) > 120]) / 2\n  sundur.xts <- xts(sundur.val, \n                    order.by=seq(index(meteo.xts[time.seq])[1], \n                                 tail(index(meteo.xts[time.seq]), 1), \n                                 by=paste(dt, \"sec\")))\n}\n\n# ENGINE PARAMETERS ------------------------------------------------------------\n\n# INDIVIDUAL PARAMETERS\n\n# geographical parameters: Agafay Desert, Haouz Plain, Morocco\nlat <- 31.50  # Mroos 2014, p. 29\nlon <- 8.14 # source: ditto, in decimal degrees, westward +\nelev <- 464  # ditto, in m\n\n# soil parameters, soil type: ranging from sandy loam to clay loam (FAO)\n# take means of all samples\nclay <- soildata[, \"clay\"]\nsilt <- soildata[, \"silt\"]\nsom <- rep(0, nrow(soildata))\nsom[soildata[, \"depth_upper\"] < 30] <- 2  # estimated for semidesert conditions\nsoil_dens <- 1.5  # bulk density, estimated from different sources\nsoilprop <- data.frame(clay=clay, bulkD=soil_dens, silt=silt, om=som)\nwc_sat <- mean(ptf.wosten.theta.s(clay=clay, bulkD=soil_dens, silt=silt, \n                                  om=som, topSoil=1))\nwc_pwp <- mean(pft.rawls(soilprop, parameters=\"theta\", h=15000)[, \"theta\"])\nwc_res <- mean(pft.rawls(soilprop, parameters=\"theta_r\", h=0)[, \"theta_r\"])\n# field capacity for estimation of wc_etmax\nwc_fc <- mean(pft.rawls(soilprop, parameters=\"theta\", h=316)[, \"theta\"])\n# wc_etmax is a calibration parameter! this is only a rough estimation:\nwc_etmax <- .8 * wc_fc\nbubble <- mean(pft.rawls(soilprop, parameters=\"h_b\", h=0)[, \"h_b\"])\npores_ind <- mean(pft.rawls(soilprop, parameters=\"lambda\", h=0)[, \"lambda\"])\n\n# plant parameters\ncrop_faoref <- 1\ncrop_makk <- .8\nglo_half <- 200\npar_stressHum <- .03\nres_leaf_min <- 50\nwstressmax <- 10000\nwstressmin <- 100\n\n# collect individual parameters\nparamNum <- list(bubble=bubble, crop_faoref=crop_faoref, crop_makk=crop_makk,\n                 elev=elev, glo_half=glo_half, lat=lat, lon=lon,\n                 par_stressHum=par_stressHum, pores_ind=pores_ind,\n                 res_leaf_min=res_leaf_min, soil_dens=soil_dens,\n                 wc_etmax=wc_etmax, wc_pwp=wc_pwp, wc_res=wc_res,\n                 wc_sat=wc_sat, wstressmax=wstressmax, wstressmin=wstressmin)\n\n# write parameter list to latex document\nnames.pN <- sapply(names(paramNum),\n                   function(name)\n                     paste0(\"\\\\\", \"verb!\", name, \"!\"))\ncomm.pN <- c(paste0(\"PTF by \\\\\", \"citet{rawls85}\"),\n             \"evaporation of reference crop\",\n             paste0(\"Eq. \\\\\", \"ref{eq:cropmakk}\"),\n             \"local elevation map\", \"guessed\", \"GIS data\", \"ditto\",\n             \"guessed\", paste0(\"PTF by \\\\\", \"citet{rawls85}\"), \"guessed\",\n             \"guessed\", \"calibration\", paste0(\"PTF by \\\\\", \"citet{rawls85}\"),\n             paste0(\"(PTF by \\\\\", \"citet{rawls85})\"),\n             paste0(\"PTF by \\\\\", \"citet{woesten99}\"),\n             \"wilting point\", \"field capacity\")\nparamNum.df <- data.frame(Parameter=names.pN,\n                          Value=as.numeric(paramNum),\n                          Unit=c(\"hPa\", \"--\", \"--\", \"m\", \"W m$^{-2}$\", \"°\",\n                                 \"°\", \"hPa$^{-1}$\", \"--\", \"s m$^{-1}$\",\n                                 \"kg m$^{-3}$\", \"--\", \"--\", \"--\", \"--\", \"hPa\",\n                                 \"hPa\"),\n                          Comment=comm.pN)\nparamNum.tex <- xtable(paramNum.df, align=c(\"c\", \"l\", \"r\", \"l\", \"l\"),\n                       caption=paste0(\"Object-specific scalar parameters \",\n                                      \"(\\\\\", \"textsf{paramNum}), Morocco\"),\n                       label=paste0(\"tab:morocco\", field.station, \"_paramNum\"))\nprint.xtable(paramNum.tex,\n             file=paste0(\"doku/morocco\", field.station, \"_paramNum.tex\"),\n             include.rownames=F, sanitize.text.function=identity,\n             caption.placement=\"top\")\n\n# SHARED PARAMETERS\n\nchoice_gloradmax <- 1\nchoice_plantDispl <- 1\nchoice_rcs <- 1\nchoice_roughLen <- 2\ndrag_coef <- .07\neddy_decay <- 2.5\nemis_a <- .34\nemis_b <- -.14\next <- .5\nf_day <- .2\nf_night <- .7\nfcorr_a <- 1.35\nfcorr_b <- -0.35\nh_humMeas <- 2\nh_tempMeas <- 2\nh_windMeas <- 2\nna_val <- \"-9999.\"\nradex_a <- .25\nradex_b <- .5\nres_b <- 25\nrough_bare <- .01\nrss_a <- 37.5  # calibration...\nrss_b <- -1.23  # calibration...\n\n# derive radex parameters from global radiation and extraterr. radiation\n# ... Remember to run the radex_* engine first!\nif (output != \"radex\") {\n  radex.out <- echseParEst(\"radex\",\n                           rxfile=paste0(\"~/uni/projects/radex_morocco\",\n                                         \"/run/out/test1.txt\"),\n                           grfile=paste0(\"~/uni/projects/evap_morocco\",\n                                         \"/data/forcing/meteo/05_meteofill/out/\",\n                                         field.station, \"/glorad_data.dat\"),\n                           r.quantile=0.05, plots=T)\n  radex_a <- radex.out[1]\n  radex_b <- radex.out[2]\n}\n\nif (fcorr_a + fcorr_b != 1)\n  stop(\"The sum of fcorr_a and fcorr_b must equal 1!\")\n\n# collect shared parameters\nsharedParamNum <- list(choice_et=et.choice[2],\n                       choice_gloradmax=choice_gloradmax,\n                       choice_plantDispl=choice_plantDispl,\n                       choice_rcs=choice_rcs, choice_roughLen=choice_roughLen,\n                       drag_coef=drag_coef, eddy_decay=eddy_decay,\n                       emis_a=emis_a, emis_b=emis_b, ext=ext, f_day=f_day,\n                       f_night=f_night, fcorr_a=fcorr_a, fcorr_b=fcorr_b,\n                       h_humMeas=h_humMeas, h_tempMeas=h_tempMeas,\n                       h_windMeas=h_windMeas, na_val=na_val, radex_a=radex_a,\n                       radex_b=radex_b, res_b=res_b, rough_bare=rough_bare,\n                       rss_a=rss_a, rss_b=rss_b)\n\n# write parameter list to latex table\nnames.sPN <- sapply(names(sharedParamNum),\n                    function(name)\n                      paste0(\"\\\\\", \"verb!\", name, \"!\"))\ncomm.sPN <- c(\"calibration\",\n              paste0(\"as used by \\\\\", \"citet{shuttleworth85} from \\\\\",\n                     \"citet{monteith73}\"),\n              paste0(\"as used by \\\\\", \"citet{maidment93} for average \",\n                     \"conditions\"),\n              \"ditto\", \"guessed\", \"estimation from soil heat data\",\n              \"ditto\", paste0(\"as used by \\\\\", \"citet{maidment93}\"), \"ditto\",\n              \"\", \"\", \"\", \"estimation from radiation data\", \"ditto\",\n              paste0(\"as used by \\\\\", \"citet{shuttleworth85}\"), \"ditto\", \"\", \"\")\nsharedParamNum.df <- data.frame(Parameter=names.sPN[-c(1:5, 18)],\n                                Value=as.numeric(sharedParamNum)[-c(1:5, 18)],\n                                Unit=c(\"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\",\n                                       \"--\", \"--\", \"m\", \"m\", \"m\", \"--\",\n                                       \"--\", \"s m$^{-1}$\", \"m\", \"--\", \"--\"),\n                                Comment=comm.sPN)\nsharedParamNum.tex <- xtable(sharedParamNum.df,\n                             align=c(\"c\", \"l\", \"r\", \"l\", \"l\"),\n                             caption=paste0(\"Group-specific \",\n                                            \"scalar parameters \",\n                                            \"(\\\\\", \"textsf{sharedParamNum}), \",\n                                            \"Morocco\"),\n                             label=paste0(\"tab:morocco\", field.station,\n                                          \"_sharedParamNum\"))\nprint.xtable(sharedParamNum.tex,\n             file=paste0(\"doku/morocco\", field.station, \"_sharedParamNum.tex\"),\n             include.rownames=F, sanitize.text.function=identity,\n             caption.placement=\"top\")\n\n# EXTERNAL INPUT PARAMETERS (alb, cano_height, lai)\n\nalb <- 0.3\ncano_height <- 1.2\nlai <- 0.5\n\ninputExt.df <- data.frame(Parameter=c(paste0(\"\\\\\", \"verb!alb!\"),\n                                      paste0(\"\\\\\", \"verb!cano_height!\"),\n                                      paste0(\"\\\\\", \"verb!lai!\")),\n                          Value=c(alb, cano_height, lai),\n                          Unit=c(\"--\", \"m\", \"--\"))\ninputExt.tex <- xtable(inputExt.df, align=c(\"c\", \"l\", \"r\", \"l\"),\n                       caption=paste0(\"Time-dependent parameters \",\n                                      \"(\\\\\", \"textsf{inputExt}), \",\n                                      field.station, \" Morocco\"),\n                       label=paste0(\"tab:morocco\", field.station,\n                                    \"_inputExt\"))\nprint.xtable(inputExt.tex,\n             file=paste0(\"doku/morocco\", field.station, \"_inputExt.tex\"),\n             include.rownames=F, sanitize.text.function=identity,\n             caption.placement=\"top\")\n\n# WRITE DATA INPUT FILES -------------------------------------------------------\n\n# alb (Albedo, -, AVER)\nechseInput(engine=engine, \n           variable=\"alb\", \n           stn=\"Met\", \n           const=alb,\n           t.seq=time.seq,\n           directory=paste0(\"vegPar_time_series/\", field.station, \"/\"))\n\n# apress (Air Pressure, hPa, AVER)\n# -missing-\nechseInput(engine=engine, \n           variable=\"apress\", \n           stn=\"Met\", \n           const=1000,  # somewhat average\n           t.seq=time.seq,\n           directory=paste0(\"forcing/meteo/05_meteofill/out/\", field.station,\n                            \"/\"))\n\n# cano_height (Canopy Height, m, AVER)\nechseInput(engine=engine, \n           variable=\"cano_height\", \n           stn=\"Met\", \n           const=1.2, \n           t.seq=time.seq,\n           directory=paste0(\"vegPar_time_series/\", field.station, \"/\"))\n\n# doy (Day of Year, d)\ndoy.df <- data.frame(end_of_interval=format(time.seq, \"%Y-%m-%d %H:%M:%S\"),\n                     as.numeric(strftime(time.seq, \"%j\")))\nnames(doy.df)[2] <- \"any\"\nwrite.matrix(doy.df, \n             paste0(\"~/uni/projects/\", engine, \n                    \"/data/vegPar_time_series/\", field.station,\n                    \"/doy_data.dat\"), sep=\"\\t\")\n\n# glorad (Global Radiation, W.m-2, AVER)\nechseInput(engine=engine,\n           variable=\"glorad\",\n           na.val=0,\n           stn=\"Met\",\n           column=2,\n           t.seq=time.seq,\n           directory=paste0(\"forcing/meteo/05_meteofill/out/\", field.station,\n                            \"/\"))\n\n# hour (Hour of Day, h)\nhour.df <- data.frame(end_of_interval=format(time.seq, \"%Y-%m-%d %H:%M:%S\"),\n                      as.numeric(strftime(time.seq, \"%H\")))\nnames(hour.df)[2] <- \"any\"\nwrite.matrix(hour.df, \n             paste0(\"~/uni/projects/\", engine, \n                    \"/data/vegPar_time_series/\", field.station,\n                    \"/hour_data.dat\"), sep=\"\\t\")\n\n# lai (Leaf Area Index, -, AVER)\nechseInput(engine=engine, \n           variable=\"lai\", \n           stn=\"Met\",\n           const=.5,\n           t.seq=time.seq,\n           directory=paste0(\"vegPar_time_series/\", field.station, \"/\"))\n\n# rhum (Relative Humidity, %, AVER)\nechseInput(engine=engine,\n           variable=\"rhum\", \n           na.val=mean(as.numeric(met.list[[2]]), na.rm=T), \n           stn=\"Met\",\n           column=1,\n           t.seq=time.seq,\n           directory=paste0(\"forcing/meteo/05_meteofill/out/\", field.station,\n                            \"/\"))\n\n# sundur (Sunshine Duration, h, CUMU)\nif (A$sundur == 1) {\n  sundur.df <- data.frame(end_of_interval=format(index(sundur.xts),\n                                                 \"%Y-%m-%d %H:%M:%S\"),\n                          sundur.xts)\n  names(sundur.df)[2] <- \"Met\"\n  write.matrix(sundur.df,\n               paste0(\"~/uni/projects/\", engine,\n                      \"/data/forcing/meteo/05_meteofill/out/\", field.station,\n                      \"/sundur_data.dat\"),\n               sep=\"\\t\")\n}\n\n# temper (Mean Temperature over Time Interval, degC, AVER)\nechseInput(engine=engine,\n           variable=\"temper\",\n           na.val=mean(as.numeric(met.list[[4]]), na.rm=T),  # not perfect\n           stn=\"Met\",\n           column=3,\n           t.seq=time.seq,\n           directory=paste0(\"forcing/meteo/05_meteofill/out/\", field.station,\n                            \"/\"))\n\n# utc_add (Deviation of Time Zone from UTC, h)\nechseInput(engine=engine,\n           variable=\"utc_add\",\n           stn=\"any\",\n           const=0,\n           t.seq=time.seq,\n           directory=paste0(\"vegPar_time_series/\", field.station, \"/\"))\n\n# wc_vol_root (Water Content in Root Zone, -, AVER)\n# -missing-\nechseInput(engine=engine, \n           variable=\"wc_vol_root\", \n           stn=\"Met\",\n           const=.8 * wc_sat,\n           t.seq=time.seq,\n           directory=paste0(\"forcing/meteo/05_meteofill/out/\", field.station,\n                            \"/\"))\n\n# wc_vol_top (Water Content in Topsoil, -, AVER)\n# -missing-\nechseInput(engine=engine, \n           variable=\"wc_vol_top\", \n           stn=\"Met\", \n           const=.9 * wc_sat, \n           t.seq=time.seq,\n           directory=paste0(\"forcing/meteo/05_meteofill/out/\", field.station,\n                            \"/\"))\n\n# wind (Wind Speed, m.s-1, AVER)\nechseInput(engine=engine,\n           variable=\"wind\",\n           na.val=mean(as.numeric(met.list[[6]]), na.rm=T),  # not perfect\n           stn=\"Met\",\n           column=4,\n           t.seq=time.seq,\n           directory=paste0(\"forcing/meteo/05_meteofill/out/\", field.station,\n                            \"/\"))\n\n# WRITE MODEL CONTROL FILES ----------------------------------------------------\n\nechseCtrl_cnf(engine, tstart, tend, dt)\nechseCtrl_out(engine, output, et.choice[1])\nechseCtrl_loc(engine, selection$DAT, A, locs)\nechseCtrl_fil(engine, field.station, selection$DAT, A)\nechseCtrl_shpar(engine, sharedParamNum, selection$SHP)\nechseCtrl_par(engine, paramNum, selection$PAR)\nechseCtrl_ini(engine, selection$STV, selection$I)\n\n# CALL MODEL RUN & POSTPROCESSING ---------------------------------------------\n\nechsePost(engine, et.choice, ma.width=1, field.station=field.station, \n          comp=output, wc_etmax=wc_etmax)\n\n# SHOW RESULTS ----------------------------------------------------------------\n\nSys.sleep(1.0)\n\ndstart <- strsplit(tstart, \" \")[[1]][1]\ndend <- strsplit(tend, \" \")[[1]][1]\n\nif (output == \"evap\") {\n  comp.file <- paste0(\"plot_et_compare_morocco_\", field.station, \"_\", dstart,\n                      \"_\", dend, \".pdf\")\n  cum.file <- paste0(\"plot_et_cum_morocco_\", field.station, \"_\", dstart, \"_\",\n                     dend, \".pdf\")\n} else if (output == \"glorad\") {\n  comp.file <- paste0(\"plot_glorad_compare_morocco_\", field.station, \"_\",\n                      dstart, \"_\", dend, \".pdf\")\n  cum.file <- paste0(\"plot_glorad_cum_morocco_\", field.station, \"_\",\n                     dstart, \"_\", dend, \".pdf\")\n}\n\nif (is.null(warnings())) {\n  if (output == \"evap\") {\n    system(paste0(\"cd ~/boxup/whk_echse; evince \", comp.file, \" &\"))\n  } else if (output == \"glorad\") {\n    system(paste0(\"cd ~/boxup/whk_echse; evince \", comp.file, \" &\"))\n  }\n}\n\n# SAVE RESULTS -----------------------------------------------------------------\n\nif (output == \"evap\") {\n  if (et.choice[2] == 1) {\n    method <- \"makkink\"\n  } else if (et.choice[2] == 11) {\n    method <- \"penman\"\n  } else if (et.choice[2] == 12) {\n    method <- \"faoref\"\n  } else {\n    method <- \"shuttleworth\"\n  }\n}\n\nif (is.null(warnings())) {\n  if (output == \"evap\") {\n    # copy plot for comparison to archive directory\n    system(paste0(\"cd ~/boxup/whk_echse; cp \", comp.file,\n                  \" results/evap_morocco/\", et.choice[1], \"_\", method, \"/\"))\n    # copy cumulative plot to archive dir\n    system(paste0(\"cd ~/boxup/whk_echse; cp \", cum.file,\n                  \" results/evap_morocco/\", et.choice[1], \"_\", method, \"/\"))\n    # copy simulation results to archive dir\n    system(paste0(\"cd ~/uni/projects/evap_morocco/run/out; cp test1.txt \",\n                  field.station, \"/test1.txt\"))\n  } else if (output == \"glorad\") {\n    # copy plot for comparison to archive directory\n    system(paste0(\"cd ~/boxup/whk_echse; cp \", comp.file, \" results/\", engine,\n                  \"/\"))\n    # copy cumulative plot to archive dir\n    system(paste0(\"cd ~/boxup/whk_echse; cp \", cum.file, \" results/\", engine,\n                  \"/\"))\n    # copy simulation results to archive dir\n    system(paste0(\"cd ~/uni/projects/\", engine, \"/run/out; cp test1.txt \",\n                  field.station, \"/test1.txt\"))\n  } else if (output %in% c(\"gloradmax\", \"rad_net\", \"radex\")) {\n    # copy simulation results to archive dir\n    system(paste0(\"cd ~/uni/projects/\", engine, \"/run/out; cp test1.txt \",\n                  field.station, \"/test1.txt\"))\n  }\n}\n",
    "created" : 1484307084517.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3552459887",
    "id" : "58AB26C1",
    "lastKnownWriteTime" : 1489750489,
    "last_content_update" : 1489750489347,
    "path" : "~/boxup/whk_echse/echse_morocco.R",
    "project_path" : "echse_morocco.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}