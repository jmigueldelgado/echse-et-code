{
    "collab_server" : "",
    "contents" : "################################################################################\n# Authors: J. M. Delgado, Julius Eberhard\n# Last Edit: 2016-09-30\n# Project: ECHSE Evapotranspiration\n# Program: tms\n# Aim: Analyse Weights and Signal Data of TMS Probe to Estimate\n#      Transfer Function\n# Original File: ~/boxup/whk_echse/tms_portugal/read.lolly.r\n################################################################################\n\nrm(list=ls())\ngc()\n\n# PROGRAM PARAMETERS -----------------------------------------------------------\n\n# Should R make plots for exploratory data analysis?\nplots <- F  # logical\n\n# SET AND LOAD -----------------------------------------------------------------\n\npath <- \"~/boxup/whk_echse/tms_portugal\"\nsetwd(path)\n\n# collect all ascii data files\nfiles <- dir(path=path, pattern=\"^da.*.csv$\")\n\n# read observed soil weights\nweight <- read.table(\"weights.txt\", skip=14, sep=\"\\t\")\nnames(weight) <- c(\"date\", \"weight\")\n\n# read field observations of TMS probe\nobs.HS <- read.table(\"data_93131961_8.csv\", sep=\";\")\nobs.NSA <- read.table(\"data_93131959_8.csv\", sep=\";\")\n\n# PREPROCESSING ----------------------------------------------------------------\n\n# compose files\nfor (i in 1:length(files)) {\n  D <- read.table(files[i], sep=\";\")\n  if (dim(D)[1] > 1) {\n    D[, 2] <- as.POSIXct(D[, 2], format=\"%Y.%m.%d %H:%M\", tz=\"GMT\")\n    if (i == 1) {\n      data <- D\n    } else {\n      # select and add rows in current file that include later periods\n      X <- which(data[nrow(data), 2] < D[, 2])\n      data <- rbind(data, D[X, ])\n    }\n  }\n}\nnames(data) <- c(\"Nr\", \"date\", \"X\", \"T1\", \"T2\", \"T3\", \"sm\", \"Y\", \"Z\")\n\n# prepare field observations\nobs.HS[, 2] <- as.POSIXct(obs.HS[, 2], format=\"%d.%m.%Y %H:%M\", tz=\"GMT\")\nobs.NSA[, 2] <- as.POSIXct(obs.NSA[, 2], format=\"%d.%m.%Y %H:%M\", tz=\"GMT\")\nnames(obs.HS)[c(2, 7)] <- c(\"date\", \"tms\")\nnames(obs.NSA)[c(2, 7)] <- c(\"date\", \"tms\")\n\nif (plots) {\n  # plot raw temperatures\n  plot(data$date, data$T1, type=\"l\", xlab=\"time\", ylab=\"Temperature (Â°C)\",\n       main=\"TMS data\")\n  lines(data$date, data$T2, col=\"red\", lty=3)\n  lines(data$date, data$T3, col=\"pink\", lty=4)\n  # plot raw capacitance\n  plot(data$date, data$sm, type=\"l\", xlab=\"time\", ylab=\"SM [TMS]\",\n       main=\"TMS data\")\n}\n\n# select time interval\nfrom <- which(as.POSIXct(\"2015-04-29 15:00\", tz=\"GMT\") <= data$date)[1]\nto <- which(as.POSIXct(\"2015-09-19 11:00\", tz=\"GMT\") <= data$date)[1]\n\nif (plots) {\n  # plot temperatures for selected interval\n  plot(data$date[from:to], data$T1[from:to], type=\"l\", xlab=\"time\",\n       ylab=\"Temperature (degC)\", main=\"TMS data\",\n       ylim=(c(min(data[, 4:6]), max(data[, 4:6]))))\n  lines(data$date[from:to], data$T2[from:to], col=\"firebrick3\", lty=3)\n  lines(data$date[from:to], data$T3[from:to], col=\"lightskyblue2\", lty=4)\n}\n\n# set unreasonable values to NA: temp. should be between 10 and 30 degC\ndata$T1[data$T1 < 10] <- NA\ndata$T2[data$T2 < 10 | data$T2 > 30] <- NA\ndata$T3[data$T3 < 10 | data$T3 > 30] <- NA\n\nif (plots) {\n  # plot temperatures for selected interval without unreasonable values\n  plot(data$date[from:to], data$T1[from:to], type=\"l\", xlab=\"time\",\n       ylab=\"Temperature (degC)\", main=\"TMS data\",\n       ylim=(c(min(data[, 4:6], na.rm=T), max(data[, 4:6], na.rm=T))))\n  lines(data$date[from:to], data$T2[from:to], col=\"firebrick3\", lty=3)\n  lines(data$date[from:to], data$T3[from:to], col=\"lightskyblue2\", lty=4)\n  # plot capacitance for selected interval\n  plot(data$date[from:to], data$sm[from:to], type=\"l\", xlab=\"time\",\n       ylab=\"TMS Signal\", main=\"TMS data\")\n}\n\n# remove local time and summer time\ngmt <- -2 * 3600\nweight$date <- as.POSIXct(weight$date, format=\"%d.%m.%Y %H:%M\", tz=\"GMT\") + gmt\n\n# weight of devices: flower pot coaster + bottle + probe TMS 93131942\npot.coaster <- 40.8  # g\nbottle <- 46.89  # g\nprobe <- 122.35  # g, TMS 93131942\ndev <- pot.coaster + bottle + probe  # g\n\n# volume of bottle\nd <- 7.5  # cm, diameter\nheight <- 11.5  # cm, height\nvol <- 3.14159265359 * (d / 2)^2 * height  # (cm3 = mL)\n\n# weight of soil and water (g)\nweight$soil_water <- weight$weight - dev\n\n# dry soil in g (- 10 g bonus) <----------- check\nsoil <- tail(weight$soil_water, 1) - 10\n\n# bulk density (g.cm-3)\nbd <- soil / vol\n\n# weight of water (g)\nweight$water <- weight$soil_water - soil\n\n# starting weight of water (g), needed for porosity\nwater <- weight$water[1]\n\n# gravimetric soil moisture (g.g-1)\nweight$gsm <- weight$water / soil\n\n# porosity, different approaches\nporo <- water / vol  # (mL.mL-1)\nporo2 <- 1 - bd / 2.648  # (g.g-1) with density of SiO2\n\n# volumetric soil moisture m3/m3\nweight$sm <- weight$gsm * bd  # mL.mL-1\n\nif (plots) {\n  # plot sample weights (total)\n  plot(weight$date, weight$weight, xlab=\"Time\", ylab=\"Weight of sample (g)\")\n  # plot sample weights (soil + water)\n  plot(weight$date, weight$soil_water, xlab=\"Time\",\n       ylab=\"Weight of soil and water in sample (g)\")\n  # plot sample weights (water)\n  plot(weight$date, weight$water, xlab=\"Time\",\n       ylab=\"Weight of water in the sample (g)\")\n  # plot volumetric soil moisture content\n  plot(weight$date, weight$sm * 100, xlab=\"Time\",\n       ylab=\"Vol. Soil Moisture Content (%)\")\n}\n\n# extract data points of logger at which weight was measured\nx <- c()\nfor (i in 1:length(weight$date)) {\n  x[i] <- which.min(as.numeric(data$date - weight$date[i])^2)\n}\n\n# Next section is a little bit obscure.\n# TMS standard polynomial with standard parametrisation\ndata$sm2 <- 0.000000000009 * data$sm^4 - 0.0000000382 * data$sm^3 +\n            0.0001 * data$sm^2 - 0.1168 * data$sm + 42.407\n\nif (plots)\n  # plot what exactly?\n  plot(data$sm2[x], weight$sm * 100, xlab=\"TMS SM (m3/m3)\",\n       ylab=\"Weight sample (g)\")\n\n# MODEL CALIBRATION ------------------------------------------------------------\n\nsm <- weight$sm\ntms <- data$sm[x]\n\n# color values: transparent red\nr <- 250 / 256\ng <- 83 / 256\nb <- 62 / 256\nal <- .3  # alpha (transparency)\n\n# UppErr function: calculates upper standard error for every observation\nUppErr <- function(x,       # x values\n                   mod.par  # parameters of nls model, coef(summary(nls()))\n                   ) {\n  rowSums(sapply(1:nrow(mod.par),\n                 function(i)\n                   x ^ (nrow(mod.par) - i) * (mod.par[i, 1] + mod.par[i, 2])))\n}\n\n# LowErr function: calculates the lower standard error for every observation\nLowErr <- function(x,       # x values\n                   mod.par  # parameters of nls model, coef(summary(nls)))\n                   ) {\n  rowSums(sapply(1:nrow(mod.par),\n                 function(i)\n                   x ^ (nrow(mod.par) - i) * (mod.par[i, 1] - mod.par[i, 2])))\n}\n\n# LINEAR MODEL\n\nlmod <- lm(sm ~ tms)\npara1 <- coef(summary(lmod))\nupp1 <- tms * (para1[2, 1] + para1[2, 2]) + para1[1, 1] + para1[1, 2]\nlow1 <- tms * (para1[2, 1] - para1[2, 2]) + para1[1, 1] - para1[1, 2]\n# plot data & linear model\nplot(data$sm[x], weight$sm, main=\"linear\", xlab=\"TMS Signal\",\n     ylab=\"Vol. Soil Moisture Content [-]\")\nabline(lm(sm ~ tms), col=\"tomato2\")\npolygon(c(tms, rev(tms)), c(low1, rev(upp1)), col=rgb(r, g, b, al), border=NA)\n\n# POLYNOMIAL MODEL (2ND ORDER)\n\nnlmod2 <- nls(sm ~ a * tms ^ 2 + b * tms + c,\n              trace=T, start=list(a=1e-8, b=1e-4, c=-1e-3))\npara2 <- coef(summary(nlmod2))\nupp2 <- UppErr(tms, para2)\nlow2 <- LowErr(tms, para2)\n# plot data & 2nd order model\nplot(tms, weight$sm, main=\"polynomial 2\", xlab=\"TMS Signal\", \n     ylab=\"Vol. Soil Moisture Content [-]\")\nlines(tms, predict(nlmod2), col=\"red\")\npolygon(c(tms, rev(tms)), c(low2, rev(upp2)), col=rgb(r, g, b, 0.3), border=NA)\n\n# POLYNOMIAL MODEL (3RD ORDER)\n\nnlmod3 <- nls(sm ~ a3 * tms ^ 3 + b3 * tms ^ 2 + c3 * tms + d3,\n              trace=T, start=list(a3=-1e-12, b3=1e-8, c3=1e-4, d3=-1e-3))\npara3 <- coef(summary(nlmod3))\nupp3 <- UppErr(tms, para3)\nlow3 <- LowErr(tms, para3)\n# plot data & 3rd order model\nplot(tms, weight$sm, main=\"polynomial 3\", xlab=\"TMS Signal\", \n     ylab=\"Vol. Soil Moisture Content [-]\")\nlines(tms, predict(nlmod3), col=\"blue\")\npolygon(c(tms, rev(tms)), c(low3, rev(upp3)), col=rgb(r, g, b, 0.3), border=NA)\n\n# POLYNOMIAL MODEL (4TH ORDER)\n\nnlmod4 <- nls(sm ~ a * tms^4 + b * tms^3 + c * tms^2 + d * tms + e, \n              trace=T, start=list(a=-1e-14, b=1e-10, c=-1e-7, d=1e-4, e=-1e-1))\npara4 <- coef(summary(nlmod4))\nupp4 <- UppErr(tms, para4)\nlow4 <- LowErr(tms, para4)\n# plot data & 4th order model\nplot(tms, weight$sm, main=\"polynomial 4\", xlab=\"TMS Signal\",\n     ylab=\"Vol. Soil Moisture Content [-]\")\nlines(tms, predict(nlmod4), col=\"red\")\npolygon(c(tms, rev(tms)), c(low4, rev(upp4)), col=rgb(r, g, b, 0.3), border=NA)\n\n# MODEL APPLICATION ------------------------------------------------------------\n\nsm.out.poly2 <- predict(nlmod2, newdata=obs.HS)\nsm.out.poly3 <- predict(nlmod3, newdata=obs.HS)\nsm.out.poly4 <- predict(nlmod4, newdata=obs.HS)\n\n# plot different results\npar(mfrow=c(3, 1))\nplot(obs.HS$date, sm.out.poly2, type=\"l\", main=\"polynomial 2\")\nabline(h=0, lty=3)\nabline(v=c(as.POSIXct(\"2013-12-20 16:30:00\"), as.POSIXct(\"2014-08-04 18:00:00\")), col=8)\nplot(obs.HS$date, sm.out.poly3, type=\"l\", main=\"polynomial 3\")\nabline(h=0, lty=3)\nabline(v=c(as.POSIXct(\"2013-12-20 16:30:00\"), as.POSIXct(\"2014-08-04 18:00:00\")), col=8)\nplot(obs.HS$date, sm.out.poly4, type=\"l\", main=\"polynomial 4\")\nabline(h=0, lty=3)\nabline(v=c(as.POSIXct(\"2013-12-20 16:30:00\"), as.POSIXct(\"2014-08-04 18:00:00\")), col=8)\n\n# choose either polynomial 3 or 4; 2 leads to negative values and overestimates\n# soil moisture (PTF after Woesten estimate 38.7 % saturated water content);\n# 4 has some negative values, too -> set to 0 if used for model.\n",
    "created" : 1475245237494.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3557075424",
    "id" : "923D53F7",
    "lastKnownWriteTime" : 1475247621,
    "last_content_update" : 1475247621431,
    "path" : "~/boxup/whk_echse/tms.R",
    "project_path" : "tms.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}